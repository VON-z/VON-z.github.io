<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GRF环境配置</title>
    <link href="/2024/11/12/GRF/"/>
    <url>/2024/11/12/GRF/</url>
    
    <content type="html"><![CDATA[<h1 id="grf环境配置">GRF环境配置</h1><h2 id="源代码仓">源代码仓</h2><blockquote><p>https://github.com/google-research/football</p></blockquote><h2 id="安装依赖">安装依赖</h2><figure class="highlight q"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install git cmake build-essential libgl1-mesa-<span class="hljs-built_in">dev</span> libsdl2-<span class="hljs-built_in">dev</span> \<br>libsdl2-image-<span class="hljs-built_in">dev</span> libsdl2-ttf-<span class="hljs-built_in">dev</span> libsdl2-gfx-<span class="hljs-built_in">dev</span> libboost-<span class="hljs-built_in">all</span>-<span class="hljs-built_in">dev</span> \<br>libdirectfb-<span class="hljs-built_in">dev</span> libst-<span class="hljs-built_in">dev</span> mesa-utils xvfb x11vnc python3-pip<br><br>python3 -m pip install --upgrade pip setuptools psutil wheel<br></code></pre></div></td></tr></table></figure><h2 id="安装gfootball">安装GFootball</h2><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">python3 -m pip <span class="hljs-keyword">install</span> gfootball<br></code></pre></div></td></tr></table></figure><blockquote><p>报错1 ERROR: ERROR: Failed to build installable wheels for somepyproject.toml based projects (gfootball)</p><p><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241104191115218.png" /></p><p>尝试解决方案1：更新wheel版本,0.44降到0.38.4，无效</p><p>尝试解决方案2：先将GRF的代码仓clone下来，无效</p><p>尝试解决方案3：无效</p><p>查看cmake版本：<code>cmake --version</code>，报错如下图</p><p><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241104194836124.png" /></p><p>但使用dpkg能够查到cmake，<code>dpkg -l | grep -E "cmake"</code>，如下图</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241104195030398.png"alt="image-20241104195030398" /><figcaption aria-hidden="true">image-20241104195030398</figcaption></figure><p>使用<code>echo $PATH</code>发现cmake没有配置环境变量，修改.bashrc也无效（<code>export PATH="/usr/bin:$PATH"</code>）</p><p>尝试解决方案4：删除cmake，重新安装——有效</p><p>删除cmake，<code>sudo apt remove cmake</code></p><p>重新安装cmake，<code>sudo apt-get install cmake</code></p></blockquote><blockquote><p>报错2 ModuleNotFoundError: No module named 'skbuild'</p><p><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241104203225207.png" /></p><p>尝试解决方案1：安装<code>skbuild</code>，<code>pip install scikit-build</code>，似乎有效。。。（反正用新终端再执行命令时，出现新错误了）</p></blockquote><blockquote><p>报错3 Cannot find boost python</p><p><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241104204540414.png" /></p><p>参考issue：https://github.com/google-research/football/issues/310、https://github.com/google-research/football/issues/194</p><p>尝试解决方案1：ubuntu18.04，创建一个python=3.6的虚拟环境。无效</p><p>尝试解决方案2：clone代码仓，使用<code>python3 -m pip install .</code>安装。无效</p><p>尝试解决方案3：修改cmakelist，使用<code>find . -name CMakeLists.txt</code>找到cmakelist，使用<code>find_package(PythonLibs 3.6 REQUIRED)</code>替换<code>find_package(PythonLibs 3 REQUIRED)</code>。无效</p><p>尝试解决方案4：安装3.12版本cmake。参考https://blog.csdn.net/weixin_42035347/article/details/125763949</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">下载CMake3.12（不需要解压到特定路径）<br>wget https://github.com/Kitware/CMake/releases/download/v3.12.0/cmake-3.12.0.tar.gz<br>或者 wget https://cmake.org/files/v3.12/cmake-3.12.0-Linux-x86_64.tar.gz<br>tar -zxvf cmake-3.12.0.tar.gz<br><span class="hljs-built_in">cd</span> cmake-3.12.0<br><br>编译和安装CMake<br>./bootstrap<br>make -j$(<span class="hljs-built_in">nproc</span>)<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></div></td></tr></table></figure><p>尝试解决方案5：参考https://blog.csdn.net/qq_26565435/article/details/129040032</p><p>在<code>find_package</code>语句前添加<code>set(Boost_DEBUG ON)</code>，发现代码找Boost时，找到了anaconda/lib/cmake路径下（原因不明），修改文件名，让编译时找不到anaconda下的cmake</p><p>尝试解决方案6：参考issuehttps://github.com/google-research/football/issues/317，完美解决（python=3.6，跟ubuntu18.04匹配）</p><p><code>conda install py-boost</code></p></blockquote><h2 id="运行示例程序">运行示例程序</h2><p><code>python3 -m gfootball.play_game --action_set=full</code></p><blockquote><p>报错4 signal 11</p><p><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241106145842569.png" /></p><p>尝试解决方案1：参考issue：https://github.com/google-research/football/issues/154，无效</p><p>尝试解决方案2：参考issue：https://github.com/google-research/football/issues/205，有效</p><p>添加参数<code>--render=False</code></p><p>尝试解决方案3：参考https://blog.csdn.net/FRIGIDWINTER/article/details/129301640，终端无反应，看起来无效</p></blockquote><h2 id="总结">总结</h2><ol type="1"><li>conda环境python版本和ubuntu默认python版本一致，例如ubuntu=18.04，使用python=3.6</li><li>conda环境中手动<code>conda install py-boost</code></li><li>在服务器端运行环境时关闭渲染<code>--render=False</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>MARL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MARL</tag>
      
      <tag>env</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pymarl源码解读</title>
    <link href="/2024/11/11/pymarl/"/>
    <url>/2024/11/11/pymarl/</url>
    
    <content type="html"><![CDATA[<h1 id="pymarl">pymarl</h1><h2 id="源代码仓">源代码仓</h2><blockquote><p>https://github.com/oxwhirl/pymarl</p></blockquote><p>实现算法：</p><ul><li><a href="https://arxiv.org/abs/1803.11485"><strong>QMIX</strong>:QMIX: Monotonic Value Function Factorisation for Deep Multi-AgentReinforcement Learning</a></li><li><a href="https://arxiv.org/abs/1705.08926"><strong>COMA</strong>:Counterfactual Multi-Agent Policy Gradients</a></li><li><a href="https://arxiv.org/abs/1706.05296"><strong>VDN</strong>:Value-Decomposition Networks For Cooperative Multi-AgentLearning</a></li><li><a href="https://arxiv.org/abs/1511.08779"><strong>IQL</strong>:Independent Q-Learning</a></li><li><a href="https://arxiv.org/abs/1905.05408"><strong>QTRAN</strong>:QTRAN: Learning to Factorize with Transformation for CooperativeMulti-Agent Reinforcement Learning</a></li></ul><h2 id="文件结构">文件结构</h2><blockquote><ol type="1"><li>仅考虑src文件夹下的内容</li><li>关注qmix算法涉及文件</li></ol></blockquote><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-attribute">src</span><br>├── components <br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   ├── action_selectors<span class="hljs-selector-class">.py</span><span class="hljs-comment">// 选择action</span><br>│   ├── episode_buffer<span class="hljs-selector-class">.py</span><span class="hljs-comment">// &quot;采样样本&quot;数据结构</span><br>│   ├── epsilon_schedules<span class="hljs-selector-class">.py</span><span class="hljs-comment">// epsilon衰减</span><br>│   └── transforms<span class="hljs-selector-class">.py</span><br>├── config<span class="hljs-comment">// 实验配置参数</span><br>│   ├── algs<span class="hljs-comment">// 算法配置参数</span><br>│   │   ├── coma<span class="hljs-selector-class">.yaml</span><br>│   │   ├── iql_beta<span class="hljs-selector-class">.yaml</span><br>│   │   ├── iql<span class="hljs-selector-class">.yaml</span><br>│   │   ├── qmix_beta<span class="hljs-selector-class">.yaml</span><br>│   │   ├── qmix<span class="hljs-selector-class">.yaml</span><br>│   │   ├── qtran<span class="hljs-selector-class">.yaml</span><br>│   │   ├── vdn_beta<span class="hljs-selector-class">.yaml</span><br>│   │   └── vdn<span class="hljs-selector-class">.yaml</span><br>│   ├── envs<span class="hljs-comment">// 环境配置参数</span><br>│   │   ├── sc2_beta<span class="hljs-selector-class">.yaml</span><br>│   │   └── sc2<span class="hljs-selector-class">.yaml</span><br>│   └── default<span class="hljs-selector-class">.yaml</span><span class="hljs-comment">// 基础配置参数</span><br>├── controllers<br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   └── basic_controller<span class="hljs-selector-class">.py</span><span class="hljs-comment">// agent控制器，从构建agent到选择action</span><br>├── envs<br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   └── multiagentenv<span class="hljs-selector-class">.py</span><br>├── learners<span class="hljs-comment">// 训练模型</span><br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   ├── coma_learner<span class="hljs-selector-class">.py</span><br>│   ├── q_learner<span class="hljs-selector-class">.py</span><span class="hljs-comment">// 基于q函数训练，包括vdn和qmix</span><br>│   └── qtran_learner<span class="hljs-selector-class">.py</span><br>├── modules<br>│   ├── agents<br>│   │   ├── __init__<span class="hljs-selector-class">.py</span><br>│   │   └── rnn_agent<span class="hljs-selector-class">.py</span><span class="hljs-comment">// agent网络模型，输入观测等信息，输出q值</span><br>│   ├── critics<br>│   │   ├── __init__<span class="hljs-selector-class">.py</span><br>│   │   └── coma<span class="hljs-selector-class">.py</span><br>│   ├── mixers<br>│   │   ├── __init__<span class="hljs-selector-class">.py</span><br>│   │   ├── qmix<span class="hljs-selector-class">.py</span><span class="hljs-comment">// qmix的mixing网络，论文Figure 2a</span><br>│   │   ├── qtran<span class="hljs-selector-class">.py</span><br>│   │   └── vdn<span class="hljs-selector-class">.py</span><br>│   └── __init__<span class="hljs-selector-class">.py</span><br>├── runners<span class="hljs-comment">// 游戏环境运行</span><br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   ├── episode_runner<span class="hljs-selector-class">.py</span><span class="hljs-comment">// 单幕运行，run函数完整运行一次游戏</span><br>│   └── parallel_runner<span class="hljs-selector-class">.py</span><span class="hljs-comment">// 多幕并行</span><br>└── utils<br>│   ├── dict2namedtuple<span class="hljs-selector-class">.py</span><br>│   ├── logging<span class="hljs-selector-class">.py</span><br>│   ├── rl_utils<span class="hljs-selector-class">.py</span><br>│   └── timehelper<span class="hljs-selector-class">.py</span><br>├── __init__<span class="hljs-selector-class">.py</span><br>├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span><span class="hljs-comment">// 程序入口，设置sacred实验</span><br>└── run<span class="hljs-selector-class">.py</span><span class="hljs-comment">// 实验运行，涉及启动实验到关闭环境全流程</span><br></code></pre></div></td></tr></table></figure><h2 id="主要模块介绍">主要模块介绍</h2><blockquote><ol type="1"><li>以qmix算法为例</li><li>不关注log模块</li></ol></blockquote><h3 id="程序入口main.py">程序入口——main.py</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">params = deepcopy(sys.argv) <span class="hljs-comment"># 接收命令行参数</span><br><br><span class="hljs-comment"># Get the defaults from default.yaml</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(os.path.dirname(__file__), <span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-string">&quot;default.yaml&quot;</span>), <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">try</span>:<br>        config_dict = yaml.load(f, Loader=yaml.FullLoader)<br>    <span class="hljs-keyword">except</span> yaml.YAMLError <span class="hljs-keyword">as</span> exc:<br>        <span class="hljs-keyword">assert</span> <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;default.yaml error: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(exc)<br></code></pre></div></td></tr></table></figure><p>读取实验基础配置参数，即<code>src/config/default.yaml</code>的配置</p><h3 id="实验运行run.py">实验运行——run.py</h3><h3id="游戏环境运行episode_runner.py">游戏环境运行——episode_runner.py</h3><h3 id="采样样本episode_buffer.py">采样样本——episode_buffer.py</h3><h3id="智能体控制器basic_controller.py">智能体控制器——basic_controller.py</h3><h3 id="训练模型q_learner.py">训练模型——q_learner.py</h3>]]></content>
    
    
    <categories>
      
      <category>MARL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MARL</tag>
      
      <tag>env</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
