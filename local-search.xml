<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GRF环境配置</title>
    <link href="/2024/11/12/GRF/"/>
    <url>/2024/11/12/GRF/</url>
    
    <content type="html"><![CDATA[<h1 id="grf环境配置">GRF环境配置</h1><h2 id="源代码仓">源代码仓</h2><blockquote><p>https://github.com/google-research/football</p></blockquote><h2 id="安装依赖">安装依赖</h2><figure class="highlight q"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install git cmake build-essential libgl1-mesa-<span class="hljs-built_in">dev</span> libsdl2-<span class="hljs-built_in">dev</span> \<br>libsdl2-image-<span class="hljs-built_in">dev</span> libsdl2-ttf-<span class="hljs-built_in">dev</span> libsdl2-gfx-<span class="hljs-built_in">dev</span> libboost-<span class="hljs-built_in">all</span>-<span class="hljs-built_in">dev</span> \<br>libdirectfb-<span class="hljs-built_in">dev</span> libst-<span class="hljs-built_in">dev</span> mesa-utils xvfb x11vnc python3-pip<br><br>python3 -m pip install --upgrade pip setuptools psutil wheel<br></code></pre></div></td></tr></table></figure><h2 id="安装gfootball">安装GFootball</h2><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">python3 -m pip <span class="hljs-keyword">install</span> gfootball<br></code></pre></div></td></tr></table></figure><blockquote><p>报错1 ERROR: ERROR: Failed to build installable wheels for somepyproject.toml based projects (gfootball)</p><p><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241104191115218.png" /></p><p>尝试解决方案1：更新wheel版本,0.44降到0.38.4，无效</p><p>尝试解决方案2：先将GRF的代码仓clone下来，无效</p><p>尝试解决方案3：无效</p><p>查看cmake版本：<code>cmake --version</code>，报错如下图</p><p><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241104194836124.png" /></p><p>但使用dpkg能够查到cmake，<code>dpkg -l | grep -E "cmake"</code>，如下图</p><p><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241104195030398.png" /></p><p>使用<code>echo $PATH</code>发现cmake没有配置环境变量，修改.bashrc也无效（<code>export PATH="/usr/bin:$PATH"</code>）</p><p>尝试解决方案4：删除cmake，重新安装——有效</p><p>删除cmake，<code>sudo apt remove cmake</code></p><p>重新安装cmake，<code>sudo apt-get install cmake</code></p></blockquote><blockquote><p>报错2 ModuleNotFoundError: No module named 'skbuild'</p><p><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241104203225207.png" /></p><p>尝试解决方案1：安装<code>skbuild</code>，<code>pip install scikit-build</code>，似乎有效。。。（反正用新终端再执行命令时，出现新错误了）</p></blockquote><blockquote><p>报错3 Cannot find boost python</p><p><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241104204540414.png" /></p><p>参考issue：https://github.com/google-research/football/issues/310、https://github.com/google-research/football/issues/194</p><p>尝试解决方案1：ubuntu18.04，创建一个python=3.6的虚拟环境。无效</p><p>尝试解决方案2：clone代码仓，使用<code>python3 -m pip install .</code>安装。无效</p><p>尝试解决方案3：修改cmakelist，使用<code>find . -name CMakeLists.txt</code>找到cmakelist，使用<code>find_package(PythonLibs 3.6 REQUIRED)</code>替换<code>find_package(PythonLibs 3 REQUIRED)</code>。无效</p><p>尝试解决方案4：安装3.12版本cmake。参考https://blog.csdn.net/weixin_42035347/article/details/125763949</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">下载CMake3.12（不需要解压到特定路径）<br>wget https://github.com/Kitware/CMake/releases/download/v3.12.0/cmake-3.12.0.tar.gz<br>或者 wget https://cmake.org/files/v3.12/cmake-3.12.0-Linux-x86_64.tar.gz<br>tar -zxvf cmake-3.12.0.tar.gz<br><span class="hljs-built_in">cd</span> cmake-3.12.0<br><br>编译和安装CMake<br>./bootstrap<br>make -j$(<span class="hljs-built_in">nproc</span>)<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></div></td></tr></table></figure><p>尝试解决方案5：参考https://blog.csdn.net/qq_26565435/article/details/129040032</p><p>在<code>find_package</code>语句前添加<code>set(Boost_DEBUG ON)</code>，发现代码找Boost时，找到了anaconda/lib/cmake路径下（原因不明），修改文件名，让编译时找不到anaconda下的cmake</p><p>尝试解决方案6：参考issuehttps://github.com/google-research/football/issues/317，完美解决（python=3.6，跟ubuntu18.04匹配）</p><p><code>conda install py-boost</code></p></blockquote><h2 id="运行示例程序">运行示例程序</h2><p><code>python3 -m gfootball.play_game --action_set=full</code></p><blockquote><p>报错4 signal 11</p><p><imgsrc="https://cdn.jsdelivr.net/gh/VON-z/image_hosting//SIGS/image-20241106145842569.png" /></p><p>尝试解决方案1：参考issue：https://github.com/google-research/football/issues/154，无效</p><p>尝试解决方案2：参考issue：https://github.com/google-research/football/issues/205，有效</p><p>添加参数<code>--render=False</code></p><p>尝试解决方案3：参考https://blog.csdn.net/FRIGIDWINTER/article/details/129301640，终端无反应，看起来无效</p></blockquote><h2 id="总结">总结</h2><ol type="1"><li>conda环境python版本和ubuntu默认python版本一致，例如ubuntu=18.04，使用python=3.6</li><li>conda环境中手动<code>conda install py-boost</code></li><li>在服务器端运行环境时关闭渲染<code>--render=False</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>MARL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MARL</tag>
      
      <tag>env</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pymarl源码解读</title>
    <link href="/2024/11/11/pymarl/"/>
    <url>/2024/11/11/pymarl/</url>
    
    <content type="html"><![CDATA[<h1 id="pymarl源码解读">pymarl源码解读</h1><h2 id="源代码仓">源代码仓</h2><blockquote><p>https://github.com/oxwhirl/pymarl</p></blockquote><p>实现算法：</p><ul><li><a href="https://arxiv.org/abs/1803.11485"><strong>QMIX</strong>:QMIX: Monotonic Value Function Factorisation for Deep Multi-AgentReinforcement Learning</a></li><li><a href="https://arxiv.org/abs/1705.08926"><strong>COMA</strong>:Counterfactual Multi-Agent Policy Gradients</a></li><li><a href="https://arxiv.org/abs/1706.05296"><strong>VDN</strong>:Value-Decomposition Networks For Cooperative Multi-AgentLearning</a></li><li><a href="https://arxiv.org/abs/1511.08779"><strong>IQL</strong>:Independent Q-Learning</a></li><li><a href="https://arxiv.org/abs/1905.05408"><strong>QTRAN</strong>:QTRAN: Learning to Factorize with Transformation for CooperativeMulti-Agent Reinforcement Learning</a></li></ul><h2 id="文件结构">文件结构</h2><blockquote><ol type="1"><li>仅考虑src文件夹下的内容</li><li>关注qmix算法涉及文件</li></ol></blockquote><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-attribute">src</span><br>├── components <br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   ├── action_selectors<span class="hljs-selector-class">.py</span><span class="hljs-comment">// 选择action</span><br>│   ├── episode_buffer<span class="hljs-selector-class">.py</span><span class="hljs-comment">// &quot;采样样本&quot;数据结构</span><br>│   ├── epsilon_schedules<span class="hljs-selector-class">.py</span><span class="hljs-comment">// epsilon衰减</span><br>│   └── transforms<span class="hljs-selector-class">.py</span><br>├── config<span class="hljs-comment">// 实验配置参数</span><br>│   ├── algs<span class="hljs-comment">// 算法配置参数</span><br>│   │   ├── coma<span class="hljs-selector-class">.yaml</span><br>│   │   ├── iql_beta<span class="hljs-selector-class">.yaml</span><br>│   │   ├── iql<span class="hljs-selector-class">.yaml</span><br>│   │   ├── qmix_beta<span class="hljs-selector-class">.yaml</span><br>│   │   ├── qmix<span class="hljs-selector-class">.yaml</span><br>│   │   ├── qtran<span class="hljs-selector-class">.yaml</span><br>│   │   ├── vdn_beta<span class="hljs-selector-class">.yaml</span><br>│   │   └── vdn<span class="hljs-selector-class">.yaml</span><br>│   ├── envs<span class="hljs-comment">// 环境配置参数</span><br>│   │   ├── sc2_beta<span class="hljs-selector-class">.yaml</span><br>│   │   └── sc2<span class="hljs-selector-class">.yaml</span><br>│   └── default<span class="hljs-selector-class">.yaml</span><span class="hljs-comment">// 基础配置参数</span><br>├── controllers<br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   └── basic_controller<span class="hljs-selector-class">.py</span><span class="hljs-comment">// agent控制器，从构建agent到选择action</span><br>├── envs<br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   └── multiagentenv<span class="hljs-selector-class">.py</span><br>├── learners<span class="hljs-comment">// 训练模型</span><br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   ├── coma_learner<span class="hljs-selector-class">.py</span><br>│   ├── q_learner<span class="hljs-selector-class">.py</span><span class="hljs-comment">// 基于q函数训练，包括vdn和qmix</span><br>│   └── qtran_learner<span class="hljs-selector-class">.py</span><br>├── modules<br>│   ├── agents<br>│   │   ├── __init__<span class="hljs-selector-class">.py</span><br>│   │   └── rnn_agent<span class="hljs-selector-class">.py</span><span class="hljs-comment">// agent网络模型，输入观测等信息，输出q值</span><br>│   ├── critics<br>│   │   ├── __init__<span class="hljs-selector-class">.py</span><br>│   │   └── coma<span class="hljs-selector-class">.py</span><br>│   ├── mixers<br>│   │   ├── __init__<span class="hljs-selector-class">.py</span><br>│   │   ├── qmix<span class="hljs-selector-class">.py</span><span class="hljs-comment">// qmix的mixing网络，论文Figure 2a</span><br>│   │   ├── qtran<span class="hljs-selector-class">.py</span><br>│   │   └── vdn<span class="hljs-selector-class">.py</span><br>│   └── __init__<span class="hljs-selector-class">.py</span><br>├── runners<span class="hljs-comment">// 游戏环境运行</span><br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   ├── episode_runner<span class="hljs-selector-class">.py</span><span class="hljs-comment">// 单幕运行，run函数完整运行一次游戏</span><br>│   └── parallel_runner<span class="hljs-selector-class">.py</span><span class="hljs-comment">// 多幕并行</span><br>└── utils<br>│   ├── dict2namedtuple<span class="hljs-selector-class">.py</span><br>│   ├── logging<span class="hljs-selector-class">.py</span><br>│   ├── rl_utils<span class="hljs-selector-class">.py</span><br>│   └── timehelper<span class="hljs-selector-class">.py</span><br>├── __init__<span class="hljs-selector-class">.py</span><br>├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span><span class="hljs-comment">// 程序入口，设置sacred实验</span><br>└── run<span class="hljs-selector-class">.py</span><span class="hljs-comment">// 实验运行，涉及启动实验到关闭环境全流程</span><br></code></pre></div></td></tr></table></figure><h2 id="主要模块介绍">主要模块介绍</h2><blockquote><ol type="1"><li>以qmix算法为例</li><li>不关注log模块</li><li>一些简单的函数，或者工具函数（跟算法思想没有太大关联，可直接复用的代码），也不关注</li></ol></blockquote><h3 id="yaml配置文件">yaml配置文件</h3><ol type="1"><li><p>default.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">use_tensorboard:</span> <span class="hljs-literal">True</span> <span class="hljs-comment"># 使用tensorboard记录实验数据，方便后续分析。</span><br><span class="hljs-attr">save_model:</span> <span class="hljs-literal">True</span> <span class="hljs-comment"># 保存模型，方便后续测试</span><br></code></pre></div></td></tr></table></figure></li></ol><h3 id="程序入口main.py">程序入口——main.py</h3><p>创建sacred实验</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">SETTINGS[<span class="hljs-string">&#x27;CAPTURE_MODE&#x27;</span>] = <span class="hljs-string">&quot;fd&quot;</span> <span class="hljs-comment"># set to &quot;no&quot; if you want to see stdout/stderr in console</span><br>logger = get_logger()   <span class="hljs-comment"># 该语句会导致控制台输出一些类似 &quot;[DEBUG xx:xx:xx] git.cmd Popen(...)&quot; 格式的日志</span><br><br>ex = Experiment(<span class="hljs-string">&quot;pymarl&quot;</span>)<br>ex.logger = logger<br>ex.captured_out_filter = apply_backspaces_and_linefeeds <span class="hljs-comment"># 设置输出格式，避免有些实时输出（进度条等）不适合文件输出的形式</span><br><br>results_path = os.path.join(dirname(dirname(abspath(__file__))), <span class="hljs-string">&quot;results&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>加载实验配置参数，运行sacred实验</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    params = deepcopy(sys.argv) <span class="hljs-comment"># 接收命令行参数</span><br><br>    <span class="hljs-comment"># Get the defaults from default.yaml</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(os.path.dirname(__file__), <span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-string">&quot;default.yaml&quot;</span>), <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">try</span>:<br>            config_dict = yaml.load(f, Loader=yaml.FullLoader)<br>        <span class="hljs-keyword">except</span> yaml.YAMLError <span class="hljs-keyword">as</span> exc:<br>            <span class="hljs-keyword">assert</span> <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;default.yaml error: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(exc)<br><br>    <span class="hljs-comment"># Load algorithm and env base configs</span><br>    env_config = _get_config(params, <span class="hljs-string">&quot;--env-config&quot;</span>, <span class="hljs-string">&quot;envs&quot;</span>)    <span class="hljs-comment"># 获取实验环境(e.g.SC2)yaml配置</span><br>    alg_config = _get_config(params, <span class="hljs-string">&quot;--config&quot;</span>, <span class="hljs-string">&quot;algs&quot;</span>)    <span class="hljs-comment"># 获取实验算法(e.g.QMIX)yaml配置</span><br>    config_dict = &#123;**config_dict, **env_config, **alg_config&#125;   <span class="hljs-comment"># 字典合并</span><br>    config_dict = recursive_dict_update(config_dict, env_config)<br>    config_dict = recursive_dict_update(config_dict, alg_config)<br><br>    <span class="hljs-comment"># now add all the config to sacred</span><br>    ex.add_config(config_dict)<br><br>    <span class="hljs-comment"># Save to disk by default for sacred</span><br>    logger.info(<span class="hljs-string">&quot;Saving to FileStorageObserver in results/sacred.&quot;</span>)<br>    file_obs_path = os.path.join(results_path, <span class="hljs-string">&quot;sacred&quot;</span>)<br>    ex.observers.append(FileStorageObserver.create(file_obs_path))  <span class="hljs-comment"># 创建一个ex的观察者文件（写日志）</span><br><br>    ex.run_commandline(params)<br></code></pre></div></td></tr></table></figure><p>初始化随机种子，启动实验框架</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># sacred实验的主函数</span><br><span class="hljs-meta">@ex.main</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_main</span>(<span class="hljs-params">_run, _config, _log</span>):<br>    <span class="hljs-comment"># Setting the random seed throughout the modules</span><br>    config = config_copy(_config)<br>    np.random.seed(config[<span class="hljs-string">&quot;seed&quot;</span>])<br>    th.manual_seed(config[<span class="hljs-string">&quot;seed&quot;</span>])<br>    config[<span class="hljs-string">&#x27;env_args&#x27;</span>][<span class="hljs-string">&#x27;seed&#x27;</span>] = config[<span class="hljs-string">&quot;seed&quot;</span>]<br><br>    <span class="hljs-comment"># run the framework</span><br>    run(_run, config, _log)<br></code></pre></div></td></tr></table></figure><h3 id="实验运行run.py">实验运行——run.py</h3><p>前几行代码基本都是和log相关，可以暂时忽略，核心是<code>run_sequential</code>函数，后面的代码是实验结束后的一些程序上的后处理，与算法无关。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Run and train</span><br>run_sequential(args=args, logger=logger)<br></code></pre></div></td></tr></table></figure><h4 id="run_sequential函数">run_sequential函数</h4><blockquote><p>实验运行的主要函数，构建如下自定义类的对象：</p><p>runner——环境运行器。负责执行游戏环境。</p><p>buffer——经验回放池。负责存放采样数据。</p><p>mac——智能体控制器。负责构建智能体，根据输入选择行为。</p><p>learner——智能体学习器。负责训练模型参数</p><p>最后进行实验，训练智能体，记录实验结果，定期测试并保存模型</p></blockquote><h5id="构造实验需要的各种自定义类对象">构造实验需要的各种自定义类对象</h5><ol type="1"><li><p>定义环境运行器runner</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Init runner so we can get env info</span><br>runner = r_REGISTRY[args.runner](args=args, logger=logger)<br></code></pre></div></td></tr></table></figure></li><li><p>定义采样数据格式，即存在buffer里的数据大概包含哪些信息</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Default/Base scheme</span><br>scheme = &#123;<br>    <span class="hljs-string">&quot;state&quot;</span>: &#123;<span class="hljs-string">&quot;vshape&quot;</span>: env_info[<span class="hljs-string">&quot;state_shape&quot;</span>]&#125;,<br>    <span class="hljs-string">&quot;obs&quot;</span>: &#123;<span class="hljs-string">&quot;vshape&quot;</span>: env_info[<span class="hljs-string">&quot;obs_shape&quot;</span>], <span class="hljs-string">&quot;group&quot;</span>: <span class="hljs-string">&quot;agents&quot;</span>&#125;,<br>    <span class="hljs-string">&quot;actions&quot;</span>: &#123;<span class="hljs-string">&quot;vshape&quot;</span>: (<span class="hljs-number">1</span>,), <span class="hljs-string">&quot;group&quot;</span>: <span class="hljs-string">&quot;agents&quot;</span>, <span class="hljs-string">&quot;dtype&quot;</span>: th.long&#125;,<br>    <span class="hljs-string">&quot;avail_actions&quot;</span>: &#123;<span class="hljs-string">&quot;vshape&quot;</span>: (env_info[<span class="hljs-string">&quot;n_actions&quot;</span>],), <span class="hljs-string">&quot;group&quot;</span>: <span class="hljs-string">&quot;agents&quot;</span>, <span class="hljs-string">&quot;dtype&quot;</span>: th.<span class="hljs-built_in">int</span>&#125;,<br>    <span class="hljs-string">&quot;reward&quot;</span>: &#123;<span class="hljs-string">&quot;vshape&quot;</span>: (<span class="hljs-number">1</span>,)&#125;,<br>    <span class="hljs-string">&quot;terminated&quot;</span>: &#123;<span class="hljs-string">&quot;vshape&quot;</span>: (<span class="hljs-number">1</span>,), <span class="hljs-string">&quot;dtype&quot;</span>: th.uint8&#125;,<br>&#125;<br>groups = &#123;<br>    <span class="hljs-string">&quot;agents&quot;</span>: args.n_agents<br>&#125;<br>preprocess = &#123;<br>    <span class="hljs-string">&quot;actions&quot;</span>: (<span class="hljs-string">&quot;actions_onehot&quot;</span>, [OneHot(out_dim=args.n_actions)])<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>定义经验回放池buffer</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">buffer = ReplayBuffer(scheme, groups, args.buffer_size, env_info[<span class="hljs-string">&quot;episode_limit&quot;</span>] + <span class="hljs-number">1</span>,<br>                          preprocess=preprocess,<br>                          device=<span class="hljs-string">&quot;cpu&quot;</span> <span class="hljs-keyword">if</span> args.buffer_cpu_only <span class="hljs-keyword">else</span> args.device)<br></code></pre></div></td></tr></table></figure></li><li><p>定义智能体控制器mac</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Setup multiagent controller here</span><br>mac = mac_REGISTRY[args.mac](buffer.scheme, groups, args)<br></code></pre></div></td></tr></table></figure></li><li><p>将上面定义的scheme等信息，以及mac对象传给runner</p><blockquote><p>self.new_batch是一个固定参数的EpisodeBatch类的构造函数，每次调用创建一个新的对象，用于存储采样数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 以EpisodeRunner类的setup函数为例</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">self, scheme, groups, preprocess, mac</span>):<br>    <span class="hljs-variable language_">self</span>.new_batch = partial(EpisodeBatch, scheme, groups, <span class="hljs-variable language_">self</span>.batch_size, <span class="hljs-variable language_">self</span>.episode_limit + <span class="hljs-number">1</span>,<br>                             preprocess=preprocess, device=<span class="hljs-variable language_">self</span>.args.device)<br>    <span class="hljs-variable language_">self</span>.mac = mac<br></code></pre></div></td></tr></table></figure></li><li><p>定义智能体学习器learner</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Learner</span><br>learner = le_REGISTRY[args.learner](mac, buffer.scheme, logger, args)<br></code></pre></div></td></tr></table></figure></li></ol><h5id="如果有保存模型读取模型继续训练">如果有保存模型，读取模型，继续训练</h5><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> args.checkpoint_path != <span class="hljs-string">&quot;&quot;</span>:<br><br>    timesteps = []<br>    timestep_to_load = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(args.checkpoint_path):<br>        logger.console_logger.info(<span class="hljs-string">&quot;Checkpoint directiory &#123;&#125; doesn&#x27;t exist&quot;</span>.<span class="hljs-built_in">format</span>(args.checkpoint_path))<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># Go through all files in args.checkpoint_path</span><br>    <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> os.listdir(args.checkpoint_path):<br>        full_name = os.path.join(args.checkpoint_path, name)<br>        <span class="hljs-comment"># Check if they are dirs the names of which are numbers</span><br>        <span class="hljs-keyword">if</span> os.path.isdir(full_name) <span class="hljs-keyword">and</span> name.isdigit():<br>            timesteps.append(<span class="hljs-built_in">int</span>(name))<span class="hljs-comment"># 记录保存的每个模型对应的环境步</span><br><br>    <span class="hljs-comment"># 确定加载哪个环境步的模型</span><br>    <span class="hljs-comment"># 如果load_step参数设置为0，则加载最大的环境步</span><br>  <span class="hljs-comment"># 否则，加载距离load_step最近的环境步保存的模型</span><br>    <span class="hljs-keyword">if</span> args.load_step == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># choose the max timestep</span><br>        timestep_to_load = <span class="hljs-built_in">max</span>(timesteps)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># choose the timestep closest to load_step</span><br>        timestep_to_load = <span class="hljs-built_in">min</span>(timesteps, key=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">abs</span>(x - args.load_step))<br><br>    model_path = os.path.join(args.checkpoint_path, <span class="hljs-built_in">str</span>(timestep_to_load))<br><br>    logger.console_logger.info(<span class="hljs-string">&quot;Loading model from &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(model_path))<br>    learner.load_models(model_path)<br>    runner.t_env = timestep_to_load<span class="hljs-comment"># 从保存模型的环境步继续训练</span><br><br>    <span class="hljs-comment"># 仅测试，不训练</span><br>    <span class="hljs-keyword">if</span> args.evaluate <span class="hljs-keyword">or</span> args.save_replay:<br>        evaluate_sequential(args, runner)<br>        <span class="hljs-keyword">return</span><br></code></pre></div></td></tr></table></figure><h5 id="开始训练">开始训练</h5><ol type="1"><li><p>实验参数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">episode = <span class="hljs-number">0</span><span class="hljs-comment"># 当前训练多少幕</span><br>last_test_T = -args.test_interval - <span class="hljs-number">1</span><span class="hljs-comment"># 上次测试环境步，用于判断是否要进行测试</span><br>last_log_T = <span class="hljs-number">0</span><span class="hljs-comment"># 上次输出日志环境步，用于判断是否要输出日志</span><br>model_save_time = <span class="hljs-number">0</span><span class="hljs-comment"># 上次保存模型环境步，用于判断是否要保存模型</span><br><br>start_time = time.time()<span class="hljs-comment"># 实验开始时间，用于日志信息</span><br>last_time = start_time  <span class="hljs-comment"># 用于计算剩余时间（控制台输出日志）</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>while循环体（核心）</strong></p><blockquote><p>循环终止条件即训练环境步超出设定阈值</p></blockquote><ol type="1"><li><p>运行游戏环境并保存数据</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Run for a whole episode at a time</span><br>episode_batch = runner.run(test_mode=<span class="hljs-literal">False</span>) <span class="hljs-comment"># 运行一幕</span><br>buffer.insert_episode_batch(episode_batch)<br></code></pre></div></td></tr></table></figure></li><li><p>训练</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> buffer.can_sample(args.batch_size):<span class="hljs-comment"># buffer中数据量超过batch_size</span><br>    episode_sample = buffer.sample(args.batch_size)<span class="hljs-comment"># buffer中存的样本数足够，才会进行训练</span><br><br>    <span class="hljs-comment"># Truncate batch to only filled timesteps</span><br>    max_ep_t = episode_sample.max_t_filled()<br>    episode_sample = episode_sample[:, :max_ep_t]<span class="hljs-comment"># 使用从buffer中采样的训练样本集的最长时间序列，对所有样本的时间维度做截断</span><br><br>    <span class="hljs-keyword">if</span> episode_sample.device != args.device:<br>        episode_sample.to(args.device)<br><br>    learner.train(episode_sample, runner.t_env, episode)<span class="hljs-comment"># 训练</span><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Execute test runs once in a while</span><br>n_test_runs = <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, args.test_nepisode // runner.batch_size)<span class="hljs-comment"># 每次测试跑n_test_runs幕</span><br><span class="hljs-keyword">if</span> (runner.t_env - last_test_T) / args.test_interval &gt;= <span class="hljs-number">1.0</span>:<span class="hljs-comment"># 距离上次测试，已经过test_interval环境步</span><br><br>    logger.console_logger.info(<span class="hljs-string">&quot;t_env: &#123;&#125; / &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(runner.t_env, args.t_max))<span class="hljs-comment"># 控制台打印训练进度</span><br>    logger.console_logger.info(<span class="hljs-string">&quot;Estimated time left: &#123;&#125;. Time passed: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<br>        time_left(last_time, last_test_T, runner.t_env, args.t_max), time_str(time.time() - start_time)))<span class="hljs-comment"># 控制台打印估计剩余训练时间</span><br>    last_time = time.time()<br><br>    last_test_T = runner.t_env<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_test_runs):<br>        runner.run(test_mode=<span class="hljs-literal">True</span>)<span class="hljs-comment"># 测试</span><br></code></pre></div></td></tr></table></figure></li><li><p>保存模型</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> args.save_model <span class="hljs-keyword">and</span> (runner.t_env - model_save_time &gt;= args.save_model_interval <span class="hljs-keyword">or</span> model_save_time == <span class="hljs-number">0</span>):<span class="hljs-comment"># 超参数设置save_model并且距离上次保存模型，已经过save_model_interval环境步（或者是训练的起始阶段）</span><br>    model_save_time = runner.t_env<br>    save_path = os.path.join(args.local_results_path, <span class="hljs-string">&quot;models&quot;</span>, args.unique_token, <span class="hljs-built_in">str</span>(runner.t_env))<br>    <span class="hljs-comment">#&quot;results/models/&#123;&#125;&quot;.format(unique_token)</span><br>    os.makedirs(save_path, exist_ok=<span class="hljs-literal">True</span>)<br>    logger.console_logger.info(<span class="hljs-string">&quot;Saving models to &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(save_path))<br><br>    <span class="hljs-comment"># learner should handle saving/loading -- delegate actor save/load to mac,</span><br>    <span class="hljs-comment"># use appropriate filenames to do critics, optimizer states</span><br>    learner.save_models(save_path)<span class="hljs-comment"># 保存模型</span><br></code></pre></div></td></tr></table></figure></li><li><p>打印日志</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> (runner.t_env - last_log_T) &gt;= args.log_interval:<span class="hljs-comment"># 距离上次打印日志，已经过log_interval环境步</span><br>    logger.log_stat(<span class="hljs-string">&quot;episode&quot;</span>, episode, runner.t_env)<br>    logger.print_recent_stats()<br>    last_log_T = runner.t_env<br></code></pre></div></td></tr></table></figure></li></ol></li><li><p>关闭环境</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">runner.close_env()<br>logger.console_logger.info(<span class="hljs-string">&quot;Finished Training&quot;</span>)<br></code></pre></div></td></tr></table></figure></li></ol><h3id="游戏环境运行episode_runner.py">游戏环境运行——episode_runner.py</h3><h3 id="采样样本episode_buffer.py">采样样本——episode_buffer.py</h3><h3id="智能体控制器basic_controller.py">智能体控制器——basic_controller.py</h3><h3 id="训练模型q_learner.py">训练模型——q_learner.py</h3><h2 id="在本地测试效果">在本地测试效果</h2><blockquote><p><strong>Note:</strong> Replays cannot be watched using the Linuxversion of StarCraft II. Please use either the Mac or Windows version ofthe StarCraft II client.</p><p>根据官方介绍，需要在windows下查看效果</p><p><em>下面的前3步也可以在linux下进行，直接将生成的<code>.SC2Replay</code>文件回传本地，回放文件在<code>/StarCraft II/Replays/</code>路径下面</em></p></blockquote><ol type="1"><li><p>使用<code>scp</code>将训练好的model回传本地</p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ruby">scp -r &lt;user<span class="hljs-variable">@remote_host</span><span class="hljs-symbol">:/path/to/remote/folder&gt;</span> &lt;<span class="hljs-regexp">/path/to</span><span class="hljs-regexp">/local/destination</span>&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>设置<code>default.yaml</code>参数</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">checkpoint_path:</span> <span class="hljs-string">&quot;results/models/qmix__2024-11-10_13-17-31&quot;</span><br><span class="hljs-symbol">evaluate:</span> <span class="hljs-literal">True</span><br><span class="hljs-symbol">save_replay:</span> <span class="hljs-literal">True</span><br></code></pre></div></td></tr></table></figure></li><li><p>运行实验（仅测试，生成回放文件）</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment"># 参数跟训练时保持一致</span><br>python src/main.py <span class="hljs-attribute">--config</span>=qmix <span class="hljs-attribute">--env-config</span>=sc2 with env_args.<span class="hljs-attribute">map_name</span>=2s3z<br></code></pre></div></td></tr></table></figure></li><li><p>运行<code>.SC2Replay</code>程序</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>MARL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MARL</tag>
      
      <tag>env</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
